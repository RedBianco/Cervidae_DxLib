#pragma once

//==============================================================================//
/*
	
*/
//==============================================================================//


//-----------------------------------------------------------------------------------
// 便利関数群
//-----------------------------------------------------------------------------------
namespace UtilityMath
{
	// 浮動小数点型の変数の値を指定の値に近づける処理を行う
	//     戻り値 : 変数の値が指定の値に達したかどうか
	//              ( true : 指定の値に達した  false : 指定の値に達していない )
	const bool	ParamChangeFloat(
		
		float*	Param,			// 操作対象の変数のアドレス
		float	TargetParam,	// 目標とする値
		float	StepTime,		// 推移させる時間
		float	Speed			// 値の変化速度
	);

	// 浮動小数点型の変数に代入されている角度を指定の角度に近づける処理を行う
	// ( 目標とする角度と変数に代入されている角度の差が 2.0f * π 以内である必要がある )
	// 戻り値 : 変数の角度が指定の角度に達したかどうか
	//		( true : 指定の角度に達した  false : 指定の角度に達していない )
	const bool	ParamChangeAngle(
		float*	Param,			// 操作対象の変数のアドレス
		float	TargetParam,	// 目標とする角度
		float	StepTime,		// 推移させる時間
		float	Speed			// 角度の変化速度
	);

	// 指定の範囲からランダムで決定した値を取得する( 浮動小数点値 )
	//     戻り値 : ランダムで決定した値
	// 最大値 // 最小値
	const float	GetRandomFloat( float MaxF, float MinF );

	// 指定の範囲からランダムで決定した値を取得する( 整数値 )
	//     戻り値 : ランダムで決定した値
	// 最大値 // 最小値
	const int	GetRandomInt( int MaxI, int MinI );


}


/* End UtilityMath.h */
